"use strict";

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

var _interopRequireWildcard = require("babel-runtime/helpers/interop-require-wildcard")["default"];

exports.__esModule = true;

var _helpersBuildComprehension = require("../../helpers/build-comprehension");

var _helpersBuildComprehension2 = _interopRequireDefault(_helpersBuildComprehension);

var _babelTraverse = require("babel-traverse");

var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

var _babelTemplate = require("babel-template");

var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

var buildContainer = _babelTemplate2["default"]("\n  (function () {\n    let KEY = [];\n    return KEY;\n  })();\n");

var buildPush = _babelTemplate2["default"]("\n  KEY.push(STATEMENT);\n");

var metadata = {
  stage: 0
};

exports.metadata = metadata;
var visitor = {
  ComprehensionExpression: function ComprehensionExpression(path) {
    if (path.is("generator")) {
      return generator(path);
    } else {
      return array(path);
    }
  }
};

exports.visitor = visitor;
function generator(_ref) {
  var node = _ref.node;

  var body = [];
  var container = t.functionExpression(null, [], t.blockStatement(body), true);
  container.shadow = true;

  body.push(_helpersBuildComprehension2["default"](node, function () {
    return t.expressionStatement(t.yieldExpression(node.body));
  }));

  return t.callExpression(container, []);
}

function array(_ref2) {
  var node = _ref2.node;
  var parent = _ref2.parent;
  var scope = _ref2.scope;

  var uid = scope.generateUidIdentifierBasedOnNode(parent);

  var container = buildContainer({
    KEY: uid
  });
  container.callee.shadow = true;

  var block = container.callee.body;
  var body = block.body;

  if (_babelTraverse2["default"].hasType(node, scope, "YieldExpression", t.FUNCTION_TYPES)) {
    container.callee.generator = true;
    container = t.yieldExpression(container, true);
  }

  var returnStatement = body.pop();

  body.push(_helpersBuildComprehension2["default"](node, function () {
    return buildPush({
      STATEMENT: node.body,
      KEY: uid
    }, true);
  }));
  body.push(returnStatement);

  return container;
}