{
  "name": "function-to-string",
  "description": "Extract parameters and body of a function into strings",
  "version": "0.2.0",
  "homepage": "https://github.com/twolfson/function-to-string",
  "author": {
    "name": "Todd Wolfson",
    "email": "todd@twolfson.com",
    "url": "http://twolfson.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/twolfson/function-to-string.git"
  },
  "bugs": {
    "url": "https://github.com/twolfson/function-to-string/issues"
  },
  "licenses": [
    {
      "type": "UNLICENSE",
      "url": "https://github.com/twolfson/function-to-string/blob/master/UNLICENSE"
    }
  ],
  "main": "lib/function-to-string",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "esprima": "~1.0.4"
  },
  "devDependencies": {
    "mocha": "~1.11.0",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-watch": "~0.4.0",
    "glob": "~3.2.7"
  },
  "keywords": [
    "function",
    "string",
    "extract",
    "convert",
    "arguments",
    "body"
  ],
  "readme": "# function-to-string [![Build status](https://travis-ci.org/twolfson/function-to-string.png?branch=master)](https://travis-ci.org/twolfson/function-to-string)\n\nExtract parameters and body of a function into strings\n\nThis was built as part of the [gifsockets][] project to pass arbitrary canvas commands with a callback to a [rgba generating PhantomJS server][].\n\n[gifsockets]: https://github.com/twolfson/gifsockets-server\n[rgba generating PhantomJS server]: https://github.com/twolfson/phantomjs-pixel-server\n\n## Getting Started\nInstall the module with: `npm install function-to-string`\n\n```javascript\nvar functionToString = require('function-to-string');\nfunctionToString(function hello(world) {\n  // This is a comment\n  return 'some text';\n});\n\n// Returns:\n{\n  name: 'hello',\n  params: ['world'],\n  body: '\\n  // This is a comment\\n  return \\'some text\\';\\n'\n}\n```\n\n## Documentation\nWe chose to use [esprima][] over [regular expression][] magic. If you are interested in the regular expression route, checkout [AngularJS' source code][]\n\n[esprima]: http://esprima.org/\n[regular expression]: http://en.wikipedia.org/wiki/Regular_expression\n[AngularJS' source code]: https://github.com/angular/angular.js/blob/61943276f026e632dccae6405a05f79d486ed898/src/auto/injector.js#L33-L74\n\n`functionToString` exposes a single function\n\n```\nfunctionToString(fn)\n/**\n * Parses function into AST, extracts parameters and body, and returns information\n * @param {Function|String} fn Function/Source code of function to parse\n * @returns {Object} retObj\n * @returns {String} retObj.name Name of `fn`\n * @returns {String[]} retObj.params Array of parameters for `fn`\n * @returns {String} retObj.body Content of `fn`\n */\n```\n\n### Reconstructing a function\nFunctions can be reconstructed via the [`Function`][] constructor:\n\n[`Function`]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n```\nvar info = {\n  name: 'hello',\n  params: ['world'],\n  body: '\\n  // This is a comment\\n  return \\'some text\\';\\n'\n};\nvar hello = Function.apply({}, info.params.concat([info.body]));\nconsole.log(hello()); // 'some text'\n```\n\n## Examples\n`functionToString` accepts function source code as well\n\n```js\n// Equivalent to `var fn = (function (hello){return 'world';}).toString()`\nvar fn = 'function (hello){return \\'world\\';}';\nfunctionToString(hello);\n\n// Returns:\n{\n  name: '',\n  params: ['hello'],\n  body: 'return \\'world\\';'\n}\n```\n\n## Donating\nSupport this project and [others by twolfson][gittip] via [gittip][].\n\n[![Support via Gittip][gittip-badge]][gittip]\n\n[gittip-badge]: https://rawgithub.com/twolfson/gittip-badge/master/dist/gittip.png\n[gittip]: https://www.gittip.com/twolfson/\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint via [grunt](https://github.com/gruntjs/grunt) and test via `npm test`.\n\n## Unlicense\nAs of Nov 16 2013, Todd Wolfson has released this repository and its contents to the public domain.\n\nIt has been released under the [UNLICENSE][].\n\n[UNLICENSE]: UNLICENSE\n",
  "readmeFilename": "README.md",
  "_id": "function-to-string@0.2.0",
  "dist": {
    "shasum": "62f98a62f00cee56d43a4a04d7d7ae4b04b0779d",
    "tarball": "http://registry.npmjs.org/function-to-string/-/function-to-string-0.2.0.tgz"
  },
  "_from": "function-to-string@>=0.2.0 <0.3.0",
  "_npmVersion": "1.3.11",
  "_npmUser": {
    "name": "twolfson",
    "email": "todd@twolfson.com"
  },
  "maintainers": [
    {
      "name": "twolfson",
      "email": "todd@twolfson.com"
    }
  ],
  "directories": {},
  "_shasum": "62f98a62f00cee56d43a4a04d7d7ae4b04b0779d",
  "_resolved": "https://registry.npmjs.org/function-to-string/-/function-to-string-0.2.0.tgz"
}
